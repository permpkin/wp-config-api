{"version":3,"sources":["@schema/SchemaConfig.js","@schema/CustomPostType.js"],"names":["SchemaConfig","site","CustomPostType","name","key"],"mappings":"sLACqBA,E,yFAYnB,SAAUC,M,uBAKV,SAAUA,Q,kHChBSC,E,4MACnBC,KAAO,oB,EACPC,IAAM,Q,mBAFoCJ","file":"static/js/4.9135bd0f.chunk.js","sourcesContent":["\nexport default class SchemaConfig {\n  \n  // constructor(config) {\n  //   this.schema = {}\n  //   this.raw = {} \n  //   this.config = {\n  //     ...this.getDefaults(),\n  //     ...config\n  //   }\n  //   this.getFormSchema(this.config)\n  // }\n\n  getConfig(site)\n  {\n    // get config value for site.\n  }\n\n  setConfig(site)\n  {\n    // get config value for site.\n  }\n\n  // getFormSchema(data) {\n    \n  //   const formSchema = {};\n\n  //   Object.keys(this.schema).forEach(key => {\n      \n  //     let Field = this.schema[key]\n\n  //     let GroupId = Field.group || 0;\n\n  //     if(!formSchema[GroupId])\n  //       formSchema[GroupId] = {\n  //         label: GroupId,\n  //         fields: []\n  //       };\n      \n  //     formSchema[GroupId].fields.push({\n  //       label: null,\n  //       key: key,\n  //       // value: ( key in data ? data[key] : {} ),\n  //       value: ( key in data ? data[key] : this.populateFieldDefaults(Field.type, Field.default) ),\n  //       ...Field\n  //     })\n\n  //   })\n    \n  //   const formSchemaMap = [];\n\n  //   Object.keys(formSchema).forEach(key => {\n  //     formSchemaMap.push({\n  //       label: key,\n  //       ...formSchema[key]\n  //     })\n  //   })\n\n  //   return formSchemaMap\n\n  // }\n\n  // populateFieldDefaults(type, value)\n  // {\n  //   switch (type) {\n  //     case 'keys': \n  //       var keyMap = {};\n  //       Object.keys(value).forEach(row => { keyMap[row] = value[row].value })\n  //     return keyMap;\n  //     default: return value;\n  //   }\n  // }\n\n  // getDefaults() {\n  //   const formSchema = {};\n  //   Object.keys(this.schema).forEach(key => {\n  //     let Field = this.schema[key]\n  //     formSchema[key] = Field.hasOwnProperty('default') ? Field.default : null\n  //   })\n  //   return formSchema\n  // }\n\n  // getSchemaData(config) {\n  //   this.config = {\n  //     ...this.getDefaults(),\n  //     ...config\n  //   }\n  //   return this.config;\n  // }\n\n  // getValue() {\n\n  //   const formSchema = {};\n\n  //   // var data = this.config;\n\n  //   var Defaults = this.getDefaults();\n\n  //   Object.keys(this.schema).forEach(key => {\n      \n  //     var Field = this.schema[key]\n\n  //     var Value = this.populateFieldDefaults(Field.type, Field.default)\n      \n  //     switch(this.schema[key].type)\n  //     {\n  //       case 'keys':\n  //         var keyValue = key in this.config && this.config[key] !== undefined ? this.config[key] : Value;\n  //         var keyMap = {};\n  //         Object.keys(keyValue).forEach(row => {\n  //           if (keyValue[row].value !== Defaults[key][row].value)\n  //             keyMap[row] = keyValue[row].value;\n  //           else\n  //             console.log('skipping default');\n  //         })\n  //         if (Object.keys(keyMap).length)\n  //           formSchema[key] = keyMap;\n  //       break;\n  //       default:\n  //         formSchema[key] = key in this.config && this.config[key] !== undefined ? this.config[key] : Value\n  //       break;\n  //     }\n\n  //   })\n\n  //   return formSchema\n  // }\n\n}","import SchemaConfig from \"./SchemaConfig\"\n\nexport default class CustomPostType extends SchemaConfig {\n  name = 'Custom Post Types'\n  key = 'types'\n}"],"sourceRoot":""}